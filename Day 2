**A sequence x1, x2, ..., xn is Fibonacci-like if:

n >= 3
xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

 

Example 1:

Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].
Example 2:

Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].
 

Constraints:

3 <= arr.length <= 1000
1 <= arr[i] < arr[i + 1] <= 109**





import java.util.HashMap;
import java.util.Map;

public class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int n = arr.length;
        // Map to store the index of each element
        Map<Integer, Integer> indexMap = new HashMap<>();
        for (int i = 0; i < n; i++) {
            indexMap.put(arr[i], i);
        }

        // DP table: dp[i][j] represents the length of the longest Fibonacci-like subsequence ending with arr[i] and arr[j]
        int[][] dp = new int[n][n];
        int maxLen = 0;

        // Iterate through all pairs (i, j)
        for (int j = 1; j < n; j++) {
            for (int i = 0; i < j; i++) {
                int prev = arr[j] - arr[i]; // The previous element in the Fibonacci-like sequence
                if (prev < arr[i] && indexMap.containsKey(prev)) {
                    int k = indexMap.get(prev); // Index of the previous element
                    dp[i][j] = dp[k][i] + 1; // Update the length of the subsequence
                    maxLen = Math.max(maxLen, dp[i][j]);
                } else {
                    dp[i][j] = 2; // Minimum length of a Fibonacci-like subsequence
                }
            }
        }

        // If maxLen is greater than 2, return maxLen; otherwise, return 0
        return maxLen > 2 ? maxLen : 0;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        int[] arr1 = {1, 2, 3, 4, 5, 6, 7, 8};
        System.out.println(solution.lenLongestFibSubseq(arr1)); // Output: 5

        // Example 2
        int[] arr2 = {1, 3, 7, 11, 12, 14, 18};
        System.out.println(solution.lenLongestFibSubseq(arr2)); // Output: 3
    }
}
